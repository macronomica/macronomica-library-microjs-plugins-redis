{"version":3,"sources":["../../src/tests/lifecicle.spec.js"],"names":["should","describe","it","Promise","resolve","reject","micro","level","plugins","__client","on","result","exist","run","then","act","client","equal","end","catch","error","JSON","stringify"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,MAAMA,SAAS,eAAKA,MAAL,EAAf;;AAEAC,SAAS,WAAT,EAAsB,YAAW;;AAE/BC,KAAG,UAAH,EAAe,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpD,UAAMC,QAAQ,uBAAM;AAClBC,iCADkB;AAElBC,eAAS,CAAE,gDAAF;AAFS,KAAN,CAAd;AAIA,QAAIC,QAAJ;;AAEAH,UAAMI,EAAN,wBAAyBC,UAAUX,OAAOY,KAAP,CAAaH,WAAWE,MAAxB,CAAnC;;AAEA,WAAOL,MACJO,GADI,GAEJC,IAFI,CAEC,MAAMR,MAAMS,GAAN,uBAFP,EAGJD,IAHI,CAGCE,UAAUhB,OAAOiB,KAAP,CAAaR,QAAb,EAAuBO,MAAvB,CAHX,EAIJF,IAJI,CAIC,MAAMR,MAAMY,GAAN,EAJP,EAKJJ,IALI,CAKC,MAAML,WAAW,IALlB,EAMJK,IANI,CAMCV,OAND,EAOJe,KAPI,CAOEd,MAPF,CAAP;AAQD,GAjBoB,CAArB;;AAmBAH,KAAG,aAAH,EAAkB,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvD,UAAMC,QAAQ,uBAAM;AAClBC,iCADkB;AAElBC,eAAS,CAAE,gDAAF;AAFS,KAAN,CAAd;;AAKAF,UAAMI,EAAN,2BAA4BC,UAAUX,OAAOiB,KAAP,CAAa,IAAb,EAAmBN,MAAnB,CAAtC;;AAEA,WAAOL,MACJO,GADI,GAEJC,IAFI,CAEC,MAAMR,MAAMY,GAAN,EAFP,EAGJJ,IAHI,CAGC,MAAMR,MAAMS,GAAN,uBAHP,EAIJI,KAJI,CAIEC,SAASpB,OAAOiB,KAAP,CACdG,KADc,EAEb,qCAAoCC,KAAKC,SAAL,uBAAgC,GAFvD,CAJX,EAQJR,IARI,CAQCV,OARD,EASJe,KATI,CASEd,MATF,CAAP;AAUD,GAlBuB,CAAxB;AAoBD,CAzCD","file":"lifecicle.spec.js","sourcesContent":["import chai from 'chai';\nimport Micro, { LEVEL_ERROR } from '@microjs/microjs';\nimport { CONNECT_OPTIONS } from './constants';\nimport RedisPlugin, { PIN_CONNECTION, EVENTS_CONNECT, EVENTS_DISCONNECT } from '../index';\n\nconst should = chai.should();\n\ndescribe('lifecicle', function() {\n\n  it('#connect', () => new Promise((resolve, reject) => {\n    const micro = Micro({\n      level  : LEVEL_ERROR,\n      plugins: [ RedisPlugin(CONNECT_OPTIONS) ]\n    });\n    let __client;\n\n    micro.on(EVENTS_CONNECT, result => should.exist(__client = result));\n\n    return micro\n      .run()\n      .then(() => micro.act(PIN_CONNECTION))\n      .then(client => should.equal(__client, client))\n      .then(() => micro.end())\n      .then(() => __client = null)\n      .then(resolve)\n      .catch(reject);\n  }));\n\n  it('#disconnect', () => new Promise((resolve, reject) => {\n    const micro = Micro({\n      level  : LEVEL_ERROR,\n      plugins: [ RedisPlugin(CONNECT_OPTIONS) ]\n    });\n\n    micro.on(EVENTS_DISCONNECT, result => should.equal(null, result));\n\n    return micro\n      .run()\n      .then(() => micro.end())\n      .then(() => micro.act(PIN_CONNECTION))\n      .catch(error => should.equal(\n        error,\n        `Вызов не существующего маршрута: ${ JSON.stringify(PIN_CONNECTION) }`\n      ))\n      .then(resolve)\n      .catch(reject);\n  }));\n\n});"]}