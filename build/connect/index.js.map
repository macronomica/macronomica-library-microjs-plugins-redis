{"version":3,"sources":["../../src/connect/index.js"],"names":["app","plugin","settings","Promise","resolve","reject","client","createClient","retry_strategy","on","log","error","id","emit","proxy","Proxy","get","target","property","rest","err","result","info","payload"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;kBAEe,UAACA,GAAD,EAAMC,MAAN;AAAA,MAAcC,QAAd,uEAAyB,EAAzB;AAAA,SAAgC,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC9E,UAAMC,SAAS,gBAAMC,YAAN;AACbC;AADa,OAEVN,QAFU,EAAf;;AAKAI,WACGG,EADH,CACM,OADN,EACeT,IAAIU,GAAJ,CAAQC,KADvB,EAEGF,EAFH,CAEM,OAFN,EAEeE,SAAS;AACpB,UAAIA,KAAJ,EAAW;AACTX,YAAIU,GAAJ,CAAQC,KAAR,CAAe,6BAAf,EAA6C,EAAEC,IAAIX,OAAOW,EAAb,EAAiBD,KAAjB,EAA7C;AACAX,YAAIa,IAAJ,kCAA+BF,KAA/B;AACA,eAAON,OAAOM,KAAP,CAAP;AACD;;AAED,YAAMG,QAAQ,IAAIC,KAAJ,CAAUT,MAAV,EAAkB;AAC9BU,YAAIC,MAAJ,EAAYC,QAAZ,EAAsB;AACpB,cAAI,sBAAWD,OAAQC,QAAR,CAAX,CAAJ,EAAoC;AAClC,mBAAO;AAAA,gDAAIC,IAAJ;AAAIA,oBAAJ;AAAA;;AAAA,qBAAa,IAAIhB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAC9BY,OAAQC,QAAR,EAAmB,GAAGC,IAAtB,EAA4B,CAACC,GAAD,EAAMC,MAAN,KAAiBD,MAAMf,OAAOe,GAAP,CAAN,GAAoBhB,QAAQiB,MAAR,CAAjE,CADkB,CAAb;AAAA,aAAP;AAED;;AAED,iBAAOJ,OAAQC,QAAR,CAAP;AACD;AAR6B,OAAlB,CAAd;;AAWAlB,UAAIU,GAAJ,CAAQY,IAAR,CAAc,8BAAd,EAA6C,EAAEV,IAAIX,OAAOW,EAAb,EAAiBW,sBAAcrB,QAAd,CAAjB,EAA7C;AACAF,UAAIa,IAAJ,4BAAyBC,KAAzB;AACAV,cAAQU,KAAR;AACD,KAvBH;AAwBD,GA9B8C,CAAhC;AAAA,C","file":"index.js","sourcesContent":["import redis from 'redis';\nimport isFunction from 'lodash.isfunction';\nimport retryStrategy from './retry-strategy';\nimport { EVENTS_CONNECT, EVENTS_CONNECT_ERROR } from './../constants';\n\nexport default (app, plugin, settings = {}) => new Promise((resolve, reject) => {\n  const client = redis.createClient({\n    retry_strategy: retryStrategy,\n    ...settings\n  });\n  \n  client\n    .on(\"error\", app.log.error)\n    .on(\"ready\", error => {\n      if (error) {\n        app.log.error(`Ошибка подключения к Redis:`, { id: plugin.id, error });\n        app.emit(EVENTS_CONNECT_ERROR, error);\n        return reject(error);\n      }\n\n      const proxy = new Proxy(client, {\n        get(target, property) {\n          if (isFunction(target[ property ])) {\n            return (...rest) => new Promise((resolve, reject) =>\n              target[ property ](...rest, (err, result) => err ? reject(err) : resolve(result)));\n          }\n\n          return target[ property ];\n        }\n      });\n\n      app.log.info(`Создано подключение к Redis:`, { id: plugin.id, payload: { ...settings } });\n      app.emit(EVENTS_CONNECT, proxy);\n      resolve(proxy);\n    });\n});"]}