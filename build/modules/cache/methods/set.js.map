{"version":3,"sources":["../../../../src/modules/cache/methods/set.js"],"names":["ERROR_INFO","module","action","plugin","request","key","value","tags","Promise","reject","property","undefined","Array","isArray","length","resolve","then","__exec","act","tagsValues","hash","JSON","stringify","client","hmset","catch","err","log","error"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,aAAa,EAAEC,8BAAF,EAAuBC,kCAAvB,EAAnB;;AAEA;;;;;;;kBAMgBC,MAAD,IAAaC,OAAD,IAAa;AAAA,QAC9BC,GAD8B,GACJD,OADI,CAC9BC,GAD8B;AAAA,QACzBC,KADyB,GACJF,OADI,CACzBE,KADyB;AAAA,sBACJF,OADI,CAClBG,IADkB;AAAA,QAClBA,IADkB,iCACX,EADW;;;AAGtC,MAAI,CAAC,sBAASF,GAAT,CAAD,IAAkBA,QAAQ,EAA1B,IAA+BA,QAAQ,GAA3C,EAAgD;AAC9C,WAAOG,QAAQC,MAAR,CAAe,oDAA6BT,UAA7B,IAAyCU,UAAU,KAAnD,IAAf,CAAP;AACD;;AAED,MAAIJ,UAAUK,SAAd,EAAyB;AACvB,WAAOH,QAAQC,MAAR,CAAe,oDAA6BT,UAA7B,IAAyCU,UAAU,OAAnD,IAAf,CAAP;AACD;;AAED,MAAI,CAACE,MAAMC,OAAN,CAAcN,IAAd,CAAD,IAAwBA,SAASI,SAArC,EAAgD;AAC9C,WAAOH,QAAQC,MAAR,CAAe,0CAAgCT,UAAhC,CAAf,CAAP;AACD;;AAED,MAAI,CAACO,KAAKO,MAAV,EAAkB;AAChB,WAAON,QAAQO,OAAR,GAAkBC,IAAlB,CAAuBC,MAAvB,CAAP;AACD;;AAED;AACA,SAAOb,QAAQc,GAAR,oCAA+BX,IAA/B,KAAuCS,IAAvC,CAA4CC,MAA5C,CAAP;;AAEA,WAASA,MAAT,GAAiC;AAAA,QAAjBE,UAAiB,uEAAJ,EAAI;;AAC/B,UAAMC,OAAO,CACX,OADW,EACFC,KAAKC,SAAL,CAAehB,KAAf,CADE,EAEX,MAFW,EAEHe,KAAKC,SAAL,CAAeH,UAAf,CAFG,CAAb;;AAKA,WAAOhB,OAAOoB,MAAP,CACJC,KADI,CACEnB,GADF,EACO,GAAGe,IADV,EAEJK,KAFI,CAEEC,OAAO;AACZtB,cAAQuB,GAAR,CAAYC,KAAZ,CAAkBF,GAAlB;AACA,aAAOlB,QAAQC,MAAR,CAAe,6BAAcL,OAAd,EAAuBsB,GAAvB,EAA4B1B,UAA5B,CAAf,CAAP;AACD,KALI,CAAP;AAMD;AACF,C","file":"set.js","sourcesContent":["import isString from 'lodash.isstring';\nimport { PIN_TAGS_GET } from '../../pins';\nimport { MODULE_NAME, ACTION_NAME_SET } from '../constants';\nimport internalError from '../../../errors/internal-error';\nimport propertyIsRequiredError from '../../../errors/property-is-required-error';\nimport tagsMustBeArrayOrUndefinedError from './../errors/tags-must-be-array-or-undefined';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: ACTION_NAME_SET };\n\n/**\n * Устанавливает значения ключа в кеш\n *\n * @param {object} plugin         Экземпляр плагина\n * @returns {function({key?: *, setCb?: *, tags?: *}): Promise}\n */\nexport default (plugin) => (request) => {\n  const { key, value, tags = [] } = request;\n  \n  if (!isString(key) || key === ''|| key === '*') {\n    return Promise.reject(propertyIsRequiredError({ ...ERROR_INFO, property: 'key' }));\n  }\n  \n  if (value === undefined) {\n    return Promise.reject(propertyIsRequiredError({ ...ERROR_INFO, property: 'value' }));\n  }\n  \n  if (!Array.isArray(tags) && tags !== undefined) {\n    return Promise.reject(tagsMustBeArrayOrUndefinedError(ERROR_INFO));\n  }\n  \n  if (!tags.length) {\n    return Promise.resolve().then(__exec);\n  }\n  \n  // Получим текущие значения переданных тегов\n  return request.act({ ...PIN_TAGS_GET, tags }).then(__exec);\n  \n  function __exec(tagsValues = {}) {\n    const hash = [\n      'value', JSON.stringify(value),\n      'tags', JSON.stringify(tagsValues)\n    ];\n    \n    return plugin.client\n      .hmset(key, ...hash)\n      .catch(err => {\n        request.log.error(err);\n        return Promise.reject(internalError(request, err, ERROR_INFO));\n      });\n  }\n};"]}