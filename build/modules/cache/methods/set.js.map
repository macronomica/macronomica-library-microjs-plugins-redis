{"version":3,"sources":["../../../../src/modules/cache/methods/set.js"],"names":["ERROR_INFO","module","action","app","plugin","key","value","tags","Promise","reject","property","undefined","Array","isArray","act","PIN_TAGS_GET","then","tagsValues","hash","JSON","stringify","client","hmset","catch","err"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,aAAa,EAAEC,8BAAF,EAAuBC,kCAAvB,EAAnB;;AAEA;;;;;;;;kBAOe,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC9B;;;;;;;AAOE,SAAO,UAA+B;AAAA,QAA5BC,GAA4B,QAA5BA,GAA4B;AAAA,QAAvBC,KAAuB,QAAvBA,KAAuB;AAAA,yBAAhBC,IAAgB;AAAA,QAAhBA,IAAgB,6BAAT,EAAS;;AACpC,QAAI,CAAC,sBAASF,GAAT,CAAD,IAAkBA,QAAQ,EAA9B,EAAkC;AAChC,aAAOG,QAAQC,MAAR,CAAe,oDAA6BT,UAA7B,IAAyCU,UAAU,KAAnD,IAAf,CAAP;AACD;;AAED,QAAIJ,UAAUK,SAAd,EAAyB;AACvB,aAAOH,QAAQC,MAAR,CAAe,oDAA6BT,UAA7B,IAAyCU,UAAU,OAAnD,IAAf,CAAP;AACD;;AAED,QAAI,CAACE,MAAMC,OAAN,CAAcN,IAAd,CAAD,IAAwBA,SAASI,SAArC,EAAgD;AAC9C,aAAOH,QAAQC,MAAR,CAAe,0CAAgCT,UAAhC,CAAf,CAAP;AACD;;AAED;AACA,WAAOG,IAAIW,GAAJ,CAAQ,EAAEC,gCAAF,EAAgBR,IAAhB,EAAR,EACJS,IADI,CACCC,cAAc;AAClB,YAAMC,OAAO,CACX,OADW,EACFC,KAAKC,SAAL,CAAed,KAAf,CADE,EAEX,MAFW,EAEHa,KAAKC,SAAL,CAAeH,UAAf,CAFG,CAAb;;AAKA,aAAOb,OAAOiB,MAAP,CACJC,KADI,CACEjB,GADF,EACO,GAAGa,IADV,EAEJK,KAFI,CAEEC,OAAOhB,QAAQC,MAAR,CAAe,6BAAcN,GAAd,EAAmBqB,GAAnB,EAAwBxB,UAAxB,CAAf,CAFT,CAAP;AAGD,KAVI,CAAP;AAWD,GAzBD;AA0BH,C","file":"set.js","sourcesContent":["import isString from 'lodash.isstring';\nimport { PIN_TAGS_GET } from '../../pins';\nimport { MODULE_NAME, ACTION_NAME_SET } from '../constants';\nimport internalError from '../../../errors/internal-error';\nimport propertyIsRequiredError from '../../../errors/property-is-required-error';\nimport tagsMustBeArrayOrUndefinedError from './../errors/tags-must-be-array-or-undefined';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: ACTION_NAME_SET };\n\n/**\n * Устанавливает значения ключа в кеш\n *\n * @param {app} app               Экземпляр библиотеки MicroJS\n * @param {object} plugin         Экземпляр плагина\n * @returns {function({key?: *, setCb?: *, tags?: *}): Promise}\n */\nexport default (app, plugin) => {\n  /**\n   * @param {string} key            Ключ кеша\n   * @param {*} value               Значение ключа в кеше\n   * @param {Array<string>} [tags]  Список тегов для установки нового значения\n   *\n   * @returns {Promise<null|*|error>}\n   */\n    return ({ key, value, tags = [] }) => {\n      if (!isString(key) || key === '') {\n        return Promise.reject(propertyIsRequiredError({ ...ERROR_INFO, property: 'key' }));\n      }\n      \n      if (value === undefined) {\n        return Promise.reject(propertyIsRequiredError({ ...ERROR_INFO, property: 'value' }));\n      }\n            \n      if (!Array.isArray(tags) || tags !== undefined) {\n        return Promise.reject(tagsMustBeArrayOrUndefinedError(ERROR_INFO));\n      }\n      \n      // Получим текущие значения переданных тегов\n      return app.act({ PIN_TAGS_GET, tags })\n        .then(tagsValues => {\n          const hash = [\n            'value', JSON.stringify(value),\n            'tags', JSON.stringify(tagsValues)\n          ];\n    \n          return plugin.client\n            .hmset(key, ...hash)\n            .catch(err => Promise.reject(internalError(app, err, ERROR_INFO)));\n        });\n    };\n};"]}