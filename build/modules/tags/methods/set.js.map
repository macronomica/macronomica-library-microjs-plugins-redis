{"version":3,"sources":["../../../../src/modules/tags/methods/set.js"],"names":["ERROR_INFO","module","action","app","plugin","tags","Array","isArray","Promise","reject","length","resolve","result","setDateNow","client","hmset","keys","err","res","reduce","tag","Date","now","push"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,aAAa,EAAEC,+BAAF,EAAuBC,mCAAvB,EAAnB;;AAEA;;;;;;;;kBAOe,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC9B;;;;;AAKA,SAAO,UAAmB;AAAA,yBAAhBC,IAAgB;AAAA,QAAhBA,IAAgB,6BAAT,EAAS;;AACxB,QAAI,CAACC,MAAMC,OAAN,CAAcF,IAAd,CAAL,EAA0B;AACxB,aAAOG,QAAQC,MAAR,CAAe,+BAAqBT,UAArB,CAAf,CAAP;AACD;;AAED,QAAI,CAACK,KAAKK,MAAV,EAAkB;AAChB,aAAOF,QAAQC,MAAR,CAAe,uCAA6BT,UAA7B,CAAf,CAAP;AACD;;AAED,WAAO,IAAIQ,OAAJ,CAAY,CAACG,OAAD,EAAUF,MAAV,KAAqB;AACtC,YAAMG,SAASC,WAAWR,IAAX,CAAf;;AAEAS,aAAOC,KAAP,sBAAuB,GAAGH,OAAOI,IAAjC,EAAuC,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACxD,YAAID,GAAJ,EAAS;AACP,iBAAOR,OAAO,6BAAcN,GAAd,EAAmBc,GAAnB,EAAwBjB,UAAxB,CAAP,CAAP;AACD;;AAEDW,gBAAQC,OAAOP,IAAf;AACD,OAND;AAOD,KAVM,CAAP;AAWD,GApBD;AAqBD,C;;AAED,SAASQ,UAAT,CAAoBR,IAApB,EAA0B;AACxB,SAAOA,KAAKc,MAAL,CAAY,CAACP,MAAD,EAASQ,GAAT,KAAiB;AAClCR,WAAOP,IAAP,CAAae,GAAb,IAAqBC,KAAKC,GAAL,EAArB;AACAV,WAAOI,IAAP,CAAYO,IAAZ,CAAiBH,GAAjB;AACAR,WAAOI,IAAP,CAAYO,IAAZ,CAAiBX,OAAOP,IAAP,CAAae,GAAb,CAAjB;AACA,WAAOR,MAAP;AACD,GALM,EAKJ,EAAEI,MAAM,EAAR,EAAYX,MAAM,EAAlB,EALI,CAAP;AAMD","file":"set.js","sourcesContent":["import { TAGS_KEY } from './../constants';\nimport { MODULE_NAME, ACTION_NAME_SET } from '../constants';\nimport internalError from '../../../errors/internal-error';\nimport tagsMystBeArrayError from './../errors/tags-must-be-array';\nimport tagsMustBeNotEmptyArrayError from '../errors/tags-must-be-not-empty-array';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: ACTION_NAME_SET };\n\n/**\n * Записывает в ключ TAGS_KEY из кеша переданные теги с новыми значениями\n *\n * @param {app} app               Экземпляр библиотеки MicroJS\n * @param {object} plugin         Экземпляр плагина\n * @returns {function({tags: Array<string>}): Promise}\n */\nexport default (app, plugin) => {\n  /**\n   * @param {Array<string>} tags  Список имен тегов для полуения их значений\n   *\n   * @returns {Promise<null|*|error>}\n   */\n  return ({ tags = [] }) => {\n    if (!Array.isArray(tags)) {\n      return Promise.reject(tagsMystBeArrayError(ERROR_INFO));\n    }\n    \n    if (!tags.length) {\n      return Promise.reject(tagsMustBeNotEmptyArrayError(ERROR_INFO));\n    }\n    \n    return new Promise((resolve, reject) => {\n      const result = setDateNow(tags);\n      \n      client.hmset(TAGS_KEY, ...result.keys, function(err, res) {\n        if (err) {\n          return reject(internalError(app, err, ERROR_INFO));\n        }\n        \n        resolve(result.tags);\n      });\n    });\n  };\n};\n\nfunction setDateNow(tags) {\n  return tags.reduce((result, tag) => {\n    result.tags[ tag ] = Date.now();\n    result.keys.push(tag);\n    result.keys.push(result.tags[ tag ]);\n    return result;\n  }, { keys: [], tags: {} });\n}"]}