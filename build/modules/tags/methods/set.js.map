{"version":3,"sources":["../../../../src/modules/tags/methods/set.js"],"names":["ERROR_INFO","module","action","app","plugin","tags","Array","isArray","Promise","reject","length","result","setDateNow","client","hmset","keys","then","catch","err","reduce","tag","Date","now","push"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,aAAa,EAAEC,+BAAF,EAAuBC,mCAAvB,EAAnB;;AAEA;;;;;;;;kBAOe,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC9B;;;;;AAKA,SAAO,UAAmB;AAAA,yBAAhBC,IAAgB;AAAA,QAAhBA,IAAgB,6BAAT,EAAS;;AACxB,QAAI,CAACC,MAAMC,OAAN,CAAcF,IAAd,CAAL,EAA0B;AACxB,aAAOG,QAAQC,MAAR,CAAe,+BAAqBT,UAArB,CAAf,CAAP;AACD;;AAED,QAAI,CAACK,KAAKK,MAAV,EAAkB;AAChB,aAAOF,QAAQC,MAAR,CAAe,uCAA6BT,UAA7B,CAAf,CAAP;AACD;;AAED,QAAI;AACF,YAAMW,SAASC,WAAWP,IAAX,CAAf;AACA,aAAOD,OAAOS,MAAP,CAAcC,KAAd,sBAA8B,GAAGH,OAAOI,IAAxC,EACJC,IADI,CACC,MAAML,OAAON,IADd,EAEJY,KAFI,CAEEC,OAAOV,QAAQC,MAAR,CAAe,6BAAcN,GAAd,EAAmBe,GAAnB,EAAwBlB,UAAxB,CAAf,CAFT,CAAP;AAGD,KALD,CAKE,OAAOkB,GAAP,EAAY;AACZ,aAAOV,QAAQC,MAAR,CAAe,6BAAcN,GAAd,EAAmBe,GAAnB,EAAwBlB,UAAxB,CAAf,CAAP;AACD;AACF,GAjBD;AAkBD,C;;AAED,SAASY,UAAT,CAAoBP,IAApB,EAA0B;AACxB,SAAOA,KAAKc,MAAL,CAAY,CAACR,MAAD,EAASS,GAAT,KAAiB;AAClCT,WAAON,IAAP,CAAae,GAAb,IAAqBC,KAAKC,GAAL,EAArB;AACAX,WAAOI,IAAP,CAAYQ,IAAZ,CAAiBH,GAAjB;AACAT,WAAOI,IAAP,CAAYQ,IAAZ,CAAiBZ,OAAON,IAAP,CAAae,GAAb,CAAjB;AACA,WAAOT,MAAP;AACD,GALM,EAKJ,EAAEI,MAAM,EAAR,EAAYV,MAAM,EAAlB,EALI,CAAP;AAMD","file":"set.js","sourcesContent":["import { TAGS_KEY } from './../constants';\nimport { MODULE_NAME, ACTION_NAME_SET } from '../constants';\nimport internalError from '../../../errors/internal-error';\nimport tagsMystBeArrayError from './../errors/tags-must-be-array';\nimport tagsMustBeNotEmptyArrayError from '../errors/tags-must-be-not-empty-array';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: ACTION_NAME_SET };\n\n/**\n * Записывает в ключ TAGS_KEY из кеша переданные теги с новыми значениями\n *\n * @param {app} app               Экземпляр библиотеки MicroJS\n * @param {object} plugin         Экземпляр плагина\n * @returns {function({tags: Array<string>}): Promise}\n */\nexport default (app, plugin) => {\n  /**\n   * @param {Array<string>} tags  Список имен тегов для установки новых значений\n   *\n   * @returns {Promise<null|*|error>}\n   */\n  return ({ tags = [] }) => {\n    if (!Array.isArray(tags)) {\n      return Promise.reject(tagsMystBeArrayError(ERROR_INFO));\n    }\n    \n    if (!tags.length) {\n      return Promise.reject(tagsMustBeNotEmptyArrayError(ERROR_INFO));\n    }\n\n    try {\n      const result = setDateNow(tags);\n      return plugin.client.hmset(TAGS_KEY, ...result.keys)\n        .then(() => result.tags)\n        .catch(err => Promise.reject(internalError(app, err, ERROR_INFO)));\n    } catch (err) {\n      return Promise.reject(internalError(app, err, ERROR_INFO));\n    }\n  };\n};\n\nfunction setDateNow(tags) {\n  return tags.reduce((result, tag) => {\n    result.tags[ tag ] = Date.now();\n    result.keys.push(tag);\n    result.keys.push(result.tags[ tag ]);\n    return result;\n  }, { keys: [], tags: {} });\n}"]}