{"version":3,"sources":["../../../../src/modules/tags/methods/get-all.js"],"names":["reduced","ERROR_INFO","module","action","app","plugin","tags","Array","isArray","client","hgetall","then","result","catch","err","Promise","reject","keys","values","length","reduceKeys","reduceValues","reduce","key","i","Object","assign","value"],"mappings":";;;;;QA8BgBA,O,GAAAA,O;;AA9BhB;;AACA;;AACA;;;;;;AAEA,MAAMC,aAAa,EAAEC,+BAAF,EAAuBC,uCAAvB,EAAnB;;AAEA;;;;;;;;kBAOe,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC9B;;;;;AAKA,SAAO,UAAmB;AAAA,yBAAhBC,IAAgB;AAAA,QAAhBA,IAAgB,6BAAT,EAAS;;AACxB,QAAI,CAACC,MAAMC,OAAN,CAAcF,IAAd,CAAL,EAA0B;AACxBA,aAAO,EAAP;AACD;;AAED,WAAOD,OAAOI,MAAP,CAAcC,OAAd,sBACJC,IADI,CACCC,UAAUA,WAAW,IAAX,GAAkBA,MAAlB,GAA2BZ,QAAQM,IAAR,EAAcM,MAAd,CADtC,EAEJC,KAFI,CAEEC,OAAOC,QAAQC,MAAR,CAAe,6BAAcZ,GAAd,EAAmBU,GAAnB,EAAwBb,UAAxB,CAAf,CAFT,CAAP;AAGD,GARD;AASD,C;;AAEM,SAASD,OAAT,CAAiBiB,IAAjB,EAAuBC,MAAvB,EAA+B;AACpC,SAAOD,KAAKE,MAAL,GAAcD,OAAOC,MAArB,GACHC,WAAWH,IAAX,EAAiBC,MAAjB,CADG,GAEHG,aAAaJ,IAAb,EAAmBC,MAAnB,CAFJ;AAGD;;AAED,SAASE,UAAT,CAAoBH,IAApB,EAA0BC,MAA1B,EAAkC;AAChC,SAAOD,KAAKK,MAAL,CAAY,CAACV,MAAD,EAASW,GAAT,EAAcC,CAAd,KAAoBC,OAAOC,MAAP,CAAcd,MAAd,EAAsB,EAAE,CAAEW,GAAF,GAASL,OAAQM,CAAR,CAAX,EAAtB,CAAhC,EAAiF,EAAjF,CAAP;AACD;;AAED,SAASH,YAAT,CAAsBJ,IAAtB,EAA4BC,MAA5B,EAAoC;AAClC,SAAOA,OAAOI,MAAP,CAAc,CAACV,MAAD,EAASe,KAAT,EAAgBH,CAAhB,KAAsBC,OAAOC,MAAP,CAAcd,MAAd,EAAsB,EAAE,CAAEK,KAAMO,CAAN,CAAF,GAAeG,KAAjB,EAAtB,CAApC,EAAqF,EAArF,CAAP;AACD","file":"get-all.js","sourcesContent":["import { TAGS_KEY } from './../constants';\nimport { MODULE_NAME, ACTION_NAME_GET_ALL } from '../constants';\nimport internalError from '../../../errors/internal-error';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: ACTION_NAME_GET_ALL };\n\n/**\n * Получает ключ TAGS_KEY из кеша с тегами и их текущими значениями\n *\n * @param {app} app               Экземпляр библиотеки MicroJS\n * @param {object} plugin         Экземпляр плагина\n * @returns {function({tags?: Array<string>}): Promise}\n */\nexport default (app, plugin) => {\n  /**\n   * @param {Array<string>} [tags]  Список имен тегов для получения их значений\n   *\n   * @returns {Promise<null|*|error>}\n   */\n  return ({ tags = [] }) => {\n    if (!Array.isArray(tags)) {\n      tags = [];\n    }\n    \n    return plugin.client.hgetall(TAGS_KEY)\n      .then(result => result === null ? result : reduced(tags, result))\n      .catch(err => Promise.reject(internalError(app, err, ERROR_INFO)));\n  };\n};\n\nexport function reduced(keys, values) {\n  return keys.length > values.length\n    ? reduceKeys(keys, values)\n    : reduceValues(keys, values);\n}\n\nfunction reduceKeys(keys, values) {\n  return keys.reduce((result, key, i) => Object.assign(result, { [ key ]: values[ i ] }), {});\n}\n\nfunction reduceValues(keys, values) {\n  return values.reduce((result, value, i) => Object.assign(result, { [ keys[ i ] ]: value }), {});\n}"]}