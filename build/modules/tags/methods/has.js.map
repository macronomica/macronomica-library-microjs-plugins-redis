{"version":3,"sources":["../../../../src/modules/tags/methods/has.js"],"names":["ERROR_INFO","module","action","app","plugin","tags","Promise","reject","tagsKeys","Object","keys","length","resolve","act","then","hasTagUpdated","catch","err","originalTags","originalTagsKeys","some","key","Number"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;AAEA,MAAMA,aAAa,EAAEC,8BAAF,EAAuBC,kCAAvB,EAAnB;;AAEA;;;;;;;;kBAOe,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAC9B;;;;;AAKA,SAAO,UAAwB;AAAA,yBAArBC,IAAqB;AAAA,QAAhBA,IAAgB,6BAAT,EAAS;;AAC7B,QAAI,CAAC,sBAAcA,IAAd,CAAL,EAA0B;AACxB,aAAOC,QAAQC,MAAR,CAAe,gCAAsBP,UAAtB,CAAf,CAAP;AACD;;AAED,UAAMQ,WAAWC,OAAOC,IAAP,CAAYL,IAAZ,CAAjB;;AAEA,QAAI,CAACG,SAASG,MAAd,EAAsB;AACpB,aAAOL,QAAQM,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,WAAOT,IAAIU,GAAJ,oCAA2BR,MAAMI,OAAOC,IAAP,CAAYL,IAAZ,CAAjC,KACJS,IADI,CACCC,cAAcV,IAAd,CADD,EAEJW,KAFI,CAEEC,OAAOX,QAAQC,MAAR,CAAe,6BAAcJ,GAAd,EAAmBc,GAAnB,EAAwBjB,UAAxB,CAAf,CAFT,CAAP;AAGD,GAdD;AAeD,C;;AAED,SAASe,aAAT,CAAuBV,IAAvB,EAA6B;AAC3B,SAAQa,YAAD,IAAkB;AACvB,QAAIC,mBAAmBV,OAAOC,IAAP,CAAYQ,YAAZ,CAAvB;AACA,QAAIT,OAAOC,IAAP,CAAYL,IAAZ,EAAkBM,MAAlB,GAA2BQ,iBAAiBR,MAAhD,EAAwD;AACtD,aAAOL,QAAQM,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED,WAAON,QAAQM,OAAR,CAAgBO,iBAAiBC,IAAjB,CAAsBC,OAAOH,aAAcG,GAAd,MAAwBC,OAAOjB,KAAMgB,GAAN,CAAP,CAArD,CAAhB,CAAP;AACD,GAPD;AAQD","file":"has.js","sourcesContent":["import isPlainObject from 'lodash.isplainobject';\nimport { MODULE_NAME, ACTION_NAME_HAS } from '../constants';\nimport { PIN_TAGS_GET } from '../pins';\nimport internalError from '../../../errors/internal-error';\nimport tagsMystBeObjectError from './../errors/tags-must-be-object';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: ACTION_NAME_HAS };\n\n/**\n * Записывает в ключ TAGS_KEY из кеша переданные теги с новыми значениями\n *\n * @param {app} app               Экземпляр библиотеки MicroJS\n * @param {object} plugin         Экземпляр плагина\n * @returns {function({tags: Array<string>}): Promise}\n */\nexport default (app, plugin) => {\n  /**\n   * @param {Object<string, number>} tags  Список имен тегов со значениями\n   *\n   * @returns {Promise<null|*|error>}\n   */\n  return ({ tags:tags = {} }) => {\n    if (!isPlainObject(tags)) {\n      return Promise.reject(tagsMystBeObjectError(ERROR_INFO));\n    }\n\n    const tagsKeys = Object.keys(tags);\n\n    if (!tagsKeys.length) {\n      return Promise.resolve(true);\n    }\n\n    return app.act({ ...PIN_TAGS_GET, tags: Object.keys(tags) })\n      .then(hasTagUpdated(tags))\n      .catch(err => Promise.reject(internalError(app, err, ERROR_INFO)));\n  };\n};\n\nfunction hasTagUpdated(tags) {\n  return (originalTags) => {\n    let originalTagsKeys = Object.keys(originalTags);\n    if (Object.keys(tags).length > originalTagsKeys.length) {\n      return Promise.resolve(false);\n    }\n\n    return Promise.resolve(originalTagsKeys.some(key => originalTags[ key ] === Number(tags[ key ])));\n  };\n}"]}