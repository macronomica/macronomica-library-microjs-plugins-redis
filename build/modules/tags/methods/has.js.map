{"version":3,"sources":["../../../../src/modules/tags/methods/has.js"],"names":["ERROR_INFO","module","action","plugin","request","tags","Promise","reject","tagsKeys","Object","keys","length","resolve","act","then","hasTagUpdated","catch","err","log","error","originalTags","originalTagsKeys","some","key","Number"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;AAEA,MAAMA,aAAa,EAAEC,8BAAF,EAAuBC,kCAAvB,EAAnB;;AAEA;;;;;;;kBAMgBC,MAAD,IAAaC,OAAD,IAAa;AAAA,sBACXA,OADW,CAC9BC,IAD8B;AAAA,QACzBA,IADyB,iCAClB,EADkB;;AAEtC,MAAI,CAAC,sBAAcA,IAAd,CAAL,EAA0B;AACxB,WAAOC,QAAQC,MAAR,CAAe,gCAAsBP,UAAtB,CAAf,CAAP;AACD;;AAED,QAAMQ,WAAWC,OAAOC,IAAP,CAAYL,IAAZ,CAAjB;;AAEA,MAAI,CAACG,SAASG,MAAd,EAAsB;AACpB,WAAOL,QAAQM,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,SAAOR,QAAQS,GAAR,oCAA+BR,MAAMI,OAAOC,IAAP,CAAYL,IAAZ,CAArC,KACJS,IADI,CACCC,cAAcV,IAAd,CADD,EAEJW,KAFI,CAEEC,OAAO;AACZb,YAAQc,GAAR,CAAYC,KAAZ,CAAkBF,GAAlB;AACA,WAAOX,QAAQC,MAAR,CAAe,6BAAcH,OAAd,EAAuBa,GAAvB,EAA4BjB,UAA5B,CAAf,CAAP;AACD,GALI,CAAP;AAMD,C;;AAED,SAASe,aAAT,CAAuBV,IAAvB,EAA6B;AAC3B,SAAQe,YAAD,IAAkB;AACvB,QAAIC,mBAAmBZ,OAAOC,IAAP,CAAYU,YAAZ,CAAvB;AACA,QAAIX,OAAOC,IAAP,CAAYL,IAAZ,EAAkBM,MAAlB,GAA2BU,iBAAiBV,MAAhD,EAAwD;AACtD,aAAOL,QAAQM,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED,WAAON,QAAQM,OAAR,CAAgBS,iBAAiBC,IAAjB,CAAsBC,OAAOH,aAAcG,GAAd,MAAwBC,OAAOnB,KAAMkB,GAAN,CAAP,CAArD,CAAhB,CAAP;AACD,GAPD;AAQD","file":"has.js","sourcesContent":["import isPlainObject from 'lodash.isplainobject';\nimport { MODULE_NAME, ACTION_NAME_HAS } from '../constants';\nimport { PIN_TAGS_GET } from '../pins';\nimport internalError from '../../../errors/internal-error';\nimport tagsMystBeObjectError from './../errors/tags-must-be-object';\n\nconst ERROR_INFO = { module: MODULE_NAME, action: ACTION_NAME_HAS };\n\n/**\n * Записывает в ключ TAGS_KEY из кеша переданные теги с новыми значениями\n *\n * @param {object} plugin         Экземпляр плагина\n * @returns {function({tags: Array<string>}): Promise}\n */\nexport default (plugin) => (request) => {\n  const { tags:tags = {} } = request;\n  if (!isPlainObject(tags)) {\n    return Promise.reject(tagsMystBeObjectError(ERROR_INFO));\n  }\n  \n  const tagsKeys = Object.keys(tags);\n  \n  if (!tagsKeys.length) {\n    return Promise.resolve(true);\n  }\n  \n  return request.act({ ...PIN_TAGS_GET, tags: Object.keys(tags) })\n    .then(hasTagUpdated(tags))\n    .catch(err => {\n      request.log.error(err);\n      return Promise.reject(internalError(request, err, ERROR_INFO));\n    });\n};\n\nfunction hasTagUpdated(tags) {\n  return (originalTags) => {\n    let originalTagsKeys = Object.keys(originalTags);\n    if (Object.keys(tags).length > originalTagsKeys.length) {\n      return Promise.resolve(false);\n    }\n\n    return Promise.resolve(originalTagsKeys.some(key => originalTags[ key ] === Number(tags[ key ])));\n  };\n}"]}